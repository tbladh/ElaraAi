# ErnestAi.Core - Core Interfaces and Shared Components

## Purpose
The ErnestAi.Core project serves as the foundation for the entire ErnestAi system. It defines all the core interfaces that establish the contracts between different components of the system, enabling a modular, extensible architecture with proper dependency injection.

## Key Components

### Audio Processing
- `IAudioProcessor` - Interface for audio input/output processing
  - Handles audio recording and playback
  - Provides streaming audio capabilities

### Wake Word Detection
- `IWakeWordDetector` - Interface for wake word detection services
  - Defines events for wake word detection
  - Configurable wake word and confidence threshold

### Speech Services
- `ISpeechToTextService` - Interface for speech-to-text services
  - Supports file, stream, and real-time transcription
  - Provides segmented transcription results
- `ITextToSpeechService` - Interface for text-to-speech services
  - Supports multiple voices and configurations
  - Provides methods for speech synthesis to stream, file, or direct output

### Intelligence Services
- `ILanguageModelService` - Interface for language model integration
  - Supports both synchronous and streaming responses
  - Handles model selection and system prompts

### Tool Execution
- `IToolExecutor` - Interface for executing tools and commands
  - Provides a standardized way to discover and execute tools
  - Returns structured results from tool execution

### Configuration
- `IAudioConfiguration` - Audio settings configuration
  - Defines audio device and quality settings
  - Configures voice activity detection
- `IModelConfiguration` - AI model configuration
  - Manages paths and settings for various AI models
  - Configures model parameters like temperature and token limits
- `IPersonalityConfiguration` - Assistant personality configuration
  - Defines the assistant's name and personality traits
  - Configures standard messages and communication style

### Storage
- `IConversationHistory` - Conversation history storage
  - Manages persistent storage of conversation messages
  - Provides methods for retrieving and searching past conversations
- `IUserPreferences` - User preferences storage
  - Generic interface for storing and retrieving user preferences
  - Type-safe preference access
- `IModelCache` - AI model caching
  - Manages downloading and caching of AI models
  - Provides access to cached models

### Plugin System
- `IPluginManager` - Plugin management interface
  - Discovers, loads, and manages plugins
  - Provides access to plugin tools
- `IPlugin` - Plugin interface
  - Defines the contract for creating plugins
  - Provides metadata and tool execution capabilities

## Dependencies
- This project has no external dependencies
- All other ErnestAi projects depend on this project

## Current State
- Core interfaces stabilized for minimal modular pipeline: audio, wake word, STT, LLM, TTS, tools, configuration, and storage abstractions.
- Downstream projects implement these contracts; changes here ripple across the solution.

## Development Guidelines
- Keep this project lightweight and focused on interfaces and shared models
- Avoid adding implementation code to this project
- Follow the interface segregation principle - keep interfaces focused and cohesive
- Document all interfaces thoroughly with XML comments
- Consider backward compatibility when modifying interfaces

## Related Files
- Root INFO.ai: `../INFO.ai`
 
## Key Files
- Interfaces: `Interfaces/*.cs`
