# ErnestAi.Host - Application Host and Entry Point

## Purpose
The ErnestAi.Host project serves as the main entry point and composition root for the ErnestAi system. It brings together all the modular components, configures dependency injection, and manages the application lifecycle.

## Key Components

### Program Entry Point
- Main application entry point
- Configures logging and error handling
- Sets up dependency injection
- Initializes and starts all required services

### Dependency Injection
- Configures the service container
- Registers all services and their implementations
- Manages service lifetimes and scopes
- Resolves dependencies for all components

### Application Lifecycle
- Manages application startup and shutdown
- Handles graceful termination
- Provides health monitoring
- Manages resource cleanup

### Service Composition
- Composes all modular services into a cohesive system
- Configures service interactions and dependencies
- Manages cross-cutting concerns
- Handles service initialization order

## Dependencies
- ErnestAi.Core - For core interfaces
- ErnestAi.Audio - For audio processing
- ErnestAi.Speech - For speech services
- ErnestAi.Intelligence - For language model services
- ErnestAi.Tools - For tool execution
- ErnestAi.Plugins - For plugin management
- ErnestAi.Configuration - For configuration management
- Microsoft.Extensions.DependencyInjection - For dependency injection

## Implementation Notes
- Uses standard .NET dependency injection patterns
- Implements proper application lifecycle management
- Provides clear error handling and logging
- Supports graceful shutdown and resource cleanup

## Development Guidelines
- Keep the host project focused on composition and lifecycle
- Avoid implementing business logic in the host project
- Use proper dependency injection patterns
- Implement proper error handling and logging
- Consider startup order and dependencies between services

## Related Files
- Root INFO.ai: `../INFO.ai`
- Core interfaces: `../ErnestAi.Core/INFO.ai`
 - Audio processing: `../ErnestAi.Audio/INFO.ai`
 - Speech services: `../ErnestAi.Speech/INFO.ai`
 - Intelligence services: `../ErnestAi.Intelligence/INFO.ai`
 - Tools: `../ErnestAi.Tools/INFO.ai`
 - Plugins: `../ErnestAi.Plugins/INFO.ai`
 - Configuration: `../ErnestAi.Configuration/INFO.ai`

## Current State
- Startup enforces validated configuration (`AppConfig.LoadAsync`) with fatal-on-missing/invalid values.
- Composition wires wake word → audio capture → STT → LLM → TTS pipeline.
- `RunErnestAiAsync()` ensures `IWakeWordDetector.WakeWord` is from config at startup.

## Key Files
- `Program.cs` — DI setup and pipeline orchestration
