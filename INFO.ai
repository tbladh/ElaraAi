# AI Agent Memory Instructions

## Core Memories to Maintain

1. **Development Philosophy**
   - Prioritize simplicity of architecture over complex patterns
   - Use stable, proven technology choices with long-term support
   - Maintain a low-dependency approach for better portability
   - Design code for easy AI agent comprehension
   - Implement local-first functionality (applications work offline)
   - Choose straightforward code over fancy patterns

2. **Code Organization Principles**
   - Each C# class, interface, enum, or struct should be defined in its own file
   - File names should match the name of the primary type they contain
   - Follow standard C# coding conventions
   - Maintain clear separation of concerns between projects

3. **Documentation Standards**
   - Use INFO.ai files as the primary reference source for architecture details
   - Keep INFO.ai files updated when adding/changing components
   - Maintain a comprehensive README.txt with instructions for both humans and AI
   - Document integration points, API contracts, and URL patterns

4. **Development Workflow**
   - Do not trigger build or run commands without explicit user permission
   - When suggesting improvements, prioritize simplification
   - Consult with the user before implementing complex patterns

## Instructions for AI Tools

When working with this codebase:
1. Save these memories to your persistent memory system upon initialization
2. IMPORTANT: Before creating new memories, check if similar memories already exist
   - Compare the core concepts in these instructions with your existing memories
   - If you find similar memories, update those instead of creating duplicates
   - Only create new memories when encountering genuinely new information
   - Particularly review memories related to development philosophy and code organization
3. Refer to these principles when making architectural decisions
4. Use INFO.ai files as your primary reference for understanding the codebase
5. Always suggest changes that align with the development philosophy

---

# Solution Information for AI Agents

## Solution Structure
The ErnestAi solution follows a modular architecture with the following structure:

1. **ErnestAi.Modular.sln** - The main solution file for the modular architecture
2. **ErnestAi.Core** - Core interfaces and shared components used across all projects
3. **ErnestAi.Audio** - Audio processing and management
4. **ErnestAi.Speech** - Speech-to-text and text-to-speech services
5. **ErnestAi.Intelligence** - Language model integration and intelligence services
6. **ErnestAi.Tools** - Tool execution and utility services
7. **ErnestAi.Plugins** - Plugin system for extensibility
8. **ErnestAi.Configuration** - Configuration management
9. **ErnestAi.Host** - Main application host and entry point

The original ErnestAi project is maintained separately as a reference implementation.

## Current State Summary
- Strict config-driven startup. Wake word is loaded from `appsettings.json` at startup and validated. Missing/invalid config is a fatal error.
- Modular pipeline working: Wake word detection → audio capture → STT (Whisper) → LLM (Ollama) → TTS.
- Recent fixes:
  - Correct stream lifecycle in `ErnestAi.Audio` (`AudioProcessor`) mirroring `WakeWordDetector` robustness.
  - Prevented premature stream disposal via `NAudio.Utils.IgnoreDisposeStream`.
  - Added synchronization to wait for first audio and for `RecordingStopped` before finalizing WAV.
  - Minimum recorded size enforced to avoid invalid WAV inputs to Whisper.

## Project INFO.ai Files
- This file: `./INFO.ai` - Root project information
- `./ErnestAi.Core/INFO.ai` - Core interfaces and shared components
- `./ErnestAi.Audio/INFO.ai` - Audio processing components
- `./ErnestAi.Speech/INFO.ai` - Speech services
- `./ErnestAi.Intelligence/INFO.ai` - Intelligence services
- `./ErnestAi.Tools/INFO.ai` - Tool execution services
- `./ErnestAi.Plugins/INFO.ai` - Plugin system
- `./ErnestAi.Configuration/INFO.ai` - Configuration management
- `./ErnestAi.Host/INFO.ai` - Application host

Each project-level INFO.ai documents its purpose, key components, dependencies, development guidelines, and links back to this root file.

## Project Dependencies
- All projects reference ErnestAi.Core for shared interfaces
- ErnestAi.Host references all other projects to compose the full application
- Always use standard `ProjectReference` elements for project dependencies rather than custom MSBuild targets
- A ProjectReference automatically:
  - Ensures the referenced project is built first
  - Establishes proper dependency tracking
  - Handles output file copying through standard MSBuild behavior
- This approach maintains simplicity and follows .NET best practices

## Key Solution Files (selected)
- Host entrypoint: `ErnestAi.Host/Program.cs`
- Wake word detector: `ErnestAi.Audio/WakeWordDetector.cs`
- Audio processor: `ErnestAi.Audio/AudioProcessor.cs`
- STT service: `ErnestAi.Speech/SpeechToTextService.cs`
- TTS service: `ErnestAi.Speech/TextToSpeechService.cs`
- LLM service: `ErnestAi.Intelligence/OllamaLanguageModelService.cs`
- Core interfaces (examples): `ErnestAi.Core/Interfaces/*.cs`
- Configuration model: `ErnestAi.Configuration/AppConfig.cs` (and related files)

## Core Interfaces
The ErnestAi.Core project defines the following key interfaces:

1. **Audio Processing**
   - `IAudioProcessor` - Interface for audio input/output processing

2. **Wake Word Detection**
   - `IWakeWordDetector` - Interface for wake word detection services

3. **Speech Services**
   - `ISpeechToTextService` - Interface for speech-to-text services
   - `ITextToSpeechService` - Interface for text-to-speech services

4. **Intelligence Services**
   - `ILanguageModelService` - Interface for language model integration

5. **Tool Execution**
   - `IToolExecutor` - Interface for executing tools and commands

6. **Configuration**
   - `IAudioConfiguration` - Audio settings configuration
   - `IModelConfiguration` - AI model configuration
   - `IPersonalityConfiguration` - Assistant personality configuration

7. **Storage**
   - `IConversationHistory` - Conversation history storage
   - `IUserPreferences` - User preferences storage
   - `IModelCache` - AI model caching

8. **Plugin System**
   - `IPluginManager` - Plugin management
   - `IPlugin` - Plugin interface

## Build and Run
The user builds and runs manually. Do not run build or deploy commands automatically. See project READMEs for details.

## Architecture Diagram
```
TBD