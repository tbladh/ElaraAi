# ErnestAi.Plugins - Plugin System for Extensibility

## Purpose
The ErnestAi.Plugins project implements a plugin system that allows for extending ErnestAi's functionality without modifying the core codebase. It enables third-party developers to create plugins that add new capabilities, tools, and integrations to the ErnestAi system.

## Key Components

### Plugin Manager
- Implements the `IPluginManager` interface from ErnestAi.Core
- Discovers, loads, and manages plugins
- Handles plugin lifecycle (initialization, enabling, disabling)
- Provides access to plugin-provided tools
- Manages plugin dependencies and conflicts

### Plugin Loading
- Dynamically loads plugin assemblies
- Validates plugin compatibility and dependencies
- Handles plugin versioning and updates
- Implements proper assembly loading isolation

### Plugin Registry
- Maintains a registry of installed plugins
- Tracks plugin state (enabled/disabled)
- Provides plugin metadata for the system
- Handles plugin configuration storage

### Plugin Security
- Implements security boundaries for plugins
- Validates plugin signatures and sources
- Manages plugin permissions and capabilities
- Prevents malicious plugin behavior

## Dependencies
- ErnestAi.Core - For core interfaces
- System.Reflection - For dynamic assembly loading
- System.Composition - For plugin discovery and composition

## Current State
- Plugin abstractions are defined in Core (`IPluginManager`, `IPlugin`).
- Plugin infrastructure scaffolding planned; not required for the minimal conversational pipeline yet.
- Integration points will be composed by Host once initial plugins are implemented.

## Implementation Notes
- Uses MEF (Managed Extensibility Framework) or similar for plugin discovery
- Implements proper assembly loading contexts to avoid conflicts
- Provides clear error handling for plugin loading failures
- Supports hot-reloading of plugins when possible

## Development Guidelines
- Keep plugin loading isolated from core functionality
- Implement proper security boundaries for plugins
- Document the plugin API thoroughly for third-party developers
- Provide example plugins for reference
- Consider versioning and backward compatibility

## Related Files
- Root INFO.ai: `../INFO.ai`
- Core interfaces: `../ErnestAi.Core/INFO.ai`
- Tool execution: `../ErnestAi.Tools/INFO.ai`

## Key Files
- (Placeholder) Plugin manager and example plugin classes when implemented
